package org.example;

public class Multithreading {
    /*
        Мьютекс:
        Каждому объекту в java присваивается Мьютекс.
        У мьютекса возможны только два состояния — «свободен» и «занят».
         состояниями нельзя управлять напрямую.
         В Java нет механизмов, которые позволили бы явно взять объект, получить его мьютекс и присвоить ему нужный статус.
         Таким образом освободить мьютекс объекта нельзя. Прямой доступ к нему есть только у Java-машины.
         Программисты же работают с мьютексами с помощью средств языка.




         Монитор:
         Монитор -  это некая надстройка над мьютексом.

         public class Main {

         private Object obj = new Object();

         public void doSomething() {

            //...какая-то логика, доступная для всех потоков

                synchronized (obj) {

                //логика, которая одновременно доступна только для одного потока
        }}}
        С помощью монитора мы освобождаем и захватываем мьютекс


        Семафор:

        Семафор — это средство для синхронизации доступа к какому-то ресурсу.
        Его особенность заключается в том, что при создании механизма синхронизации он использует счетчик.
        Счетчик указывает нам, сколько потоков одновременно могут получать доступ к общему ресурсу.
        Семафоры в Java представлены классом Semaphore.

        При создании объектов-семафоров мы можем использовать такие конструкторы:

        Semaphore(int permits)
        Semaphore(int permits, boolean fair)


        int permits — начальное и максимальное значение счетчика. То есть то, сколько потоков одновременно могут иметь доступ к общему ресурсу;

        boolean fair — для установления порядка, в котором потоки будут получать доступ.
        Если fair = true, доступ предоставляется ожидающим потокам
        в том порядке, в котором они его запрашивали. Если же он равен false, порядок будет определять планировщик потоков.


        Разница только в том, что мьютекс объекта может захватить одновременно только один поток, а в случае с семафором используется счетчик потоков, и доступ к ресурсу могут получить сразу несколько из них. И это не просто случайное сходство :)

        На самом деле мьютекс — это одноместный семафор. То есть, это семафор, счетчик которого изначально установлен в значении 1. Его еще называют «двоичным семафором», поскольку его счетчик может иметь только 2 значения — 1 («свободно») и 0 («занято»).


        Монитор, мьютекс (mutex) – это средство обеспечения контроля за доступом к ресурсу.
        У монитора может быть максимум один владелец в каждый текущий момент времени.
        Следовательно, если кто-то использует ресурс и захватил монитор для обеспечения единоличного доступа,
        то другой, желающий использовать тот же ресурс, должен подождать освобождения монитора,
        захватить его и только потом начать использовать ресурс.

        Удобно представлять монитор как id захватившего его объекта. Если этот id равен 0 – ресурс свободен.
        Если не 0 – ресурс занят. Можно встать в очередь и ждать его освобождения.

        В Java у каждого экземпляра объекта есть монитор, который контролируется непосредственно виртуальной машиной.
        Используется он так: любой нестатический synchronized-метод при своем вызове прежде всего пытается захватить монитор того объекта,
        у которого он вызван (на который он может сослаться как на this). Если это удалось – метод исполняется.
        Если нет – поток останавливается и ждет, пока монитор будет отпущен.
     */
}
